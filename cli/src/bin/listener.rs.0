use anchor_client::{Client, Cluster};
use anyhow::Result;
use fehler::throw;
use rand::rngs::OsRng;
use solana_client::{
    pubsub_client::LogsSubscription,
    rpc_response::{Response, RpcLogsResponse},
};
use solana_sdk::commitment_config::CommitmentLevel;
use solana_sdk::{pubkey::Pubkey, signature::Keypair};
use std::thread::sleep;
use std::time::Duration;
use structopt::StructOpt;
use liqz::EventInitialized;

#[derive(Debug, StructOpt)]
#[structopt(name = "listener", about = "Making transactions to the liqz Protocol")]
struct Opt {
    #[structopt(long, env, short = "p")]
    liqz_program_address: Option<Pubkey>,
}

fn main() -> Result<()> {
    let opt = Opt::from_args();
    let program_id = opt
        .liqz_program_address
        .unwrap_or_else(cli::load_program_from_idl);

    let client = Client::new(Cluster::Devnet, Keypair::generate(&mut OsRng));
    let program = client.program(program_id);

    let self_program_str = self.program_id.to_string();
    let (client, receiver) = PubsubClient::logs_subscribe(
        &program.cfg.cluster.ws_url(),
        RpcTransactionLogsFilter::Mentions(vec![program.program_id.to_string()]),
        RpcTransactionLogsConfig {
            commitment: CommitmentLevel::Finalized,
        },
    )?;

    loop {
        match receiver.recv() {
            Ok(logs) => {
                handle_logs(logs)?;
            }
            Err(err) => {
                throw!(err);
            }
        }
    }

    Ok(())
}

struct Execution {
    stack: Vec<String>,
}

impl Execution {
    pub fn new(logs: &mut &[String]) -> Result<Self, ClientError> {
        let l = &logs[0];
        *logs = &logs[1..];

        let re = Regex::new(r"^Program (.*) invoke.*$").unwrap();
        let c = re
            .captures(l)
            .ok_or(ClientError::LogParseError(l.to_string()))?;
        let program = c
            .get(1)
            .ok_or(ClientError::LogParseError(l.to_string()))?
            .as_str()
            .to_string();
        Ok(Self {
            stack: vec![program],
        })
    }

    pub fn program(&self) -> String {
        assert!(self.stack.len() > 0);
        self.stack[self.stack.len() - 1].clone()
    }

    pub fn push(&mut self, new_program: String) {
        self.stack.push(new_program);
    }

    pub fn pop(&mut self) {
        assert!(self.stack.len() > 0);
        self.stack.pop().unwrap();
    }
}

fn handle_logs(logs: Response<RpcLogsResponse>) {
    let ctx = EventContext {
        signature: logs.value.signature.parse().unwrap(),
        slot: logs.context.slot,
    };
    let mut logs = &logs.value.logs[..];

    if logs.len() == 0 {
        return;
    }

    let mut execution = if let Ok(execution) = Execution::new(&mut logs) {
        execution
    };

    for l in logs {
        // Parse the log.
        let (event, new_program, did_pop) = {
            if self_program_str == execution.program() {
                handle_program_log(&self_program_str, &l).unwrap_or_else(|e| {
                    println!("Unable to parse log: {}", e.to_string());
                    std::process::exit(1);
                })
            } else {
                let (program, did_pop) = handle_system_log(&self_program_str, &l);
                (None, program, did_pop)
            }
        };
        // Emit the event.
        if let Some(e) = event {
            f(&ctx, e);
        }
        // Switch program context on CPI.
        if let Some(new_program) = new_program {
            execution.push(new_program);
        }
        // Program returned.
        if did_pop {
            execution.pop();
        }
    }
}

fn handle_program_log<T: anchor_lang::Event + anchor_lang::AnchorDeserialize>(
    self_program_str: &str,
    l: &str,
) -> Result<(Option<T>, Option<String>, bool), ClientError> {
    // Log emitted from the current program.
    if l.starts_with("Program log:") {
        let log = l.to_string().split_off("Program log: ".len());
        let borsh_bytes = anchor_lang::__private::base64::decode(log)
            .map_err(|_| ClientError::LogParseError(l.to_string()))?;

        let mut slice: &[u8] = &borsh_bytes[..];
        let disc: [u8; 8] = {
            let mut disc = [0; 8];
            disc.copy_from_slice(&borsh_bytes[..8]);
            slice = &slice[8..];
            disc
        };
        let mut event = None;
        if disc == T::discriminator() {
            let e: T = anchor_lang::AnchorDeserialize::deserialize(&mut slice)
                .map_err(|e| ClientError::LogParseError(e.to_string()))?;
            event = Some(e);
        }
        Ok((event, None, false))
    }
    // System log.
    else {
        let (program, did_pop) = handle_system_log(&self_program_str, &l);
        Ok((None, program, did_pop))
    }
}

fn handle_system_log(this_program_str: &str, log: &str) -> (Option<String>, bool) {
    if log.starts_with(&format!("Program {} log:", this_program_str)) {
        (Some(this_program_str.to_string()), false)
    } else if log.contains("invoke") {
        (Some("cpi".to_string()), false) // Any string will do.
    } else {
        let re = Regex::new(r"^Program (.*) success*$").unwrap();
        if re.is_match(log) {
            (None, true)
        } else {
            (None, false)
        }
    }
}
